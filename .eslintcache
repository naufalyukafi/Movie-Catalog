[{"D:\\Typscript-Project\\movie-catalogue\\src\\App.tsx":"1","D:\\Typscript-Project\\movie-catalogue\\src\\index.tsx":"2","D:\\Typscript-Project\\movie-catalogue\\src\\components\\index.tsx":"3","D:\\Typscript-Project\\movie-catalogue\\src\\store\\index.tsx":"4","D:\\Typscript-Project\\movie-catalogue\\src\\components\\MovieList.tsx":"5","D:\\Typscript-Project\\movie-catalogue\\src\\reportWebVitals.ts":"6","D:\\Typscript-Project\\movie-catalogue\\src\\Pages\\Movie.tsx":"7","D:\\Typscript-Project\\movie-catalogue\\src\\Pages\\index.tsx":"8","D:\\Typscript-Project\\movie-catalogue\\src\\Pages\\DetailMovie.tsx":"9","D:\\Typscript-Project\\movie-catalogue\\src\\constants\\utils.tsx":"10","D:\\Typscript-Project\\movie-catalogue\\src\\utils\\APIUtils.tsx":"11"},{"size":418,"mtime":1610495311115,"results":"12","hashOfConfig":"13"},{"size":529,"mtime":1610405778472,"results":"14","hashOfConfig":"13"},{"size":47,"mtime":1610315634605,"results":"15","hashOfConfig":"13"},{"size":179,"mtime":1610332270609,"results":"16","hashOfConfig":"13"},{"size":1593,"mtime":1610630199213,"results":"17","hashOfConfig":"13"},{"size":425,"mtime":1606182780932,"results":"18","hashOfConfig":"13"},{"size":3418,"mtime":1610633281130,"results":"19","hashOfConfig":"13"},{"size":47,"mtime":1610455125626,"results":"20","hashOfConfig":"13"},{"size":3678,"mtime":1610637021825,"results":"21","hashOfConfig":"13"},{"size":699,"mtime":1610632280127,"results":"22","hashOfConfig":"13"},{"size":495,"mtime":1610637040805,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"p1qa24",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Typscript-Project\\movie-catalogue\\src\\App.tsx",[],"D:\\Typscript-Project\\movie-catalogue\\src\\index.tsx",[],["50","51"],"D:\\Typscript-Project\\movie-catalogue\\src\\components\\index.tsx",[],["52","53"],"D:\\Typscript-Project\\movie-catalogue\\src\\store\\index.tsx",[],"D:\\Typscript-Project\\movie-catalogue\\src\\components\\MovieList.tsx",[],"D:\\Typscript-Project\\movie-catalogue\\src\\reportWebVitals.ts",[],"D:\\Typscript-Project\\movie-catalogue\\src\\Pages\\Movie.tsx",["54"],"import React from \"react\"\r\nimport { Typography, Input, Layout, Spin, Col } from \"antd\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { IMovieListData } from \"../types\"\r\nimport MovieList from \"../components/MovieList\"\r\nimport { useRequestMovie } from \"../utils/APIUtils\"\r\n\r\nconst Movie = () => {\r\n    const [movie, setMovie] = React.useState<IMovieListData>();\r\n    const [data, setData] = React.useState(\"\");\r\n    const [loading, setLoading] = React.useState(true);\r\n    const { getAllMovie } = useRequestMovie()\r\n    const fetchMovie = async () => {\r\n        try {\r\n            const result = await getAllMovie();\r\n            setMovie(result.data)\r\n            setLoading(false)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    React.useEffect(() => {\r\n        fetchMovie();\r\n    }, [])\r\n\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setData(event.target.value)\r\n    }\r\n\r\n    const filteredData = movie?.results.filter(item => {\r\n        return item.original_title.toLowerCase().includes(data.toLowerCase())\r\n    })\r\n\r\n\r\n    return (\r\n        <Layout className=\"container\" style={{ backgroundColor: \"#222\" }}>\r\n            {loading ?\r\n                <Col style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"65vh\" }}>\r\n                    <Spin size=\"large\" tip=\"Loading movie...\" />\r\n                </Col>\r\n                : <>\r\n                    <Typography.Title level={3} style={{ textAlign: 'center', marginTop: 10, color: \"#fff\" }} >Movie Catalogue</Typography.Title>\r\n                    <Input.Search\r\n                        allowClear\r\n                        enterButton\r\n                        placeholder=\"Search movie in here ...\"\r\n                        onChange={handleChange}\r\n                        value={data}\r\n                    />\r\n                    <Layout.Content>\r\n                        {data.length > 0 ?\r\n                            filteredData?.map(item => (\r\n                                <Link to={`/detail/${item.id}`}>\r\n                                    <MovieList\r\n                                        key={item.id}\r\n                                        id={item.id}\r\n                                        backdrop_path={item.backdrop_path}\r\n                                        original_title={item.original_title}\r\n                                        release_date={item.release_date}\r\n                                        vote_average={item.vote_average}\r\n                                    />\r\n                                </Link>\r\n                            )) : movie?.results.map(item => (\r\n                                <Link to={`/detail/${item.id}`}>\r\n                                    <MovieList\r\n                                        key={item.id}\r\n                                        id={item.id}\r\n                                        backdrop_path={item.backdrop_path}\r\n                                        original_title={item.original_title}\r\n                                        release_date={item.release_date}\r\n                                        vote_average={item.vote_average}\r\n                                    />\r\n                                </Link>\r\n                            ))}\r\n\r\n                    </Layout.Content> </>}\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default Movie\r\n","D:\\Typscript-Project\\movie-catalogue\\src\\Pages\\index.tsx",[],"D:\\Typscript-Project\\movie-catalogue\\src\\Pages\\DetailMovie.tsx",["55"],"import React from 'react'\r\nimport { Typography, Layout, Button, Row, Col, Image } from \"antd\"\r\nimport { LeftOutlined } from '@ant-design/icons'\r\nimport { Link } from \"react-router-dom\"\r\nimport { POSTER_PATH } from \"../store\"\r\nimport { IDetailMovieApi } from \"../types\"\r\nimport { formatMoney } from \"../constants/utils\"\r\nimport { useRequestMovie } from \"../utils/APIUtils\"\r\n\r\nconst DetailMovie = () => {\r\n    const [detailMovie, setDetailMovie] = React.useState<IDetailMovieApi>()\r\n    const { getIdMovie } = useRequestMovie()\r\n\r\n    const fetchMovie = async () => {\r\n        try {\r\n            const result = await getIdMovie()\r\n            setDetailMovie(result.data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    React.useEffect(() => {\r\n        fetchMovie()\r\n    }, [])\r\n    return (\r\n        <Layout className=\"container\" style={{ backgroundColor: \"#222\" }}>\r\n            <Typography.Title level={3} style={{ textAlign: 'center', marginTop: 10, color: \"#fff\" }} >Movie Catalogue</Typography.Title>\r\n            <Link to=\"/\"><Button type=\"primary\" shape=\"round\" icon={<LeftOutlined />}>Back Movie</Button></Link>\r\n            <Layout.Content style={{ marginTop: 20 }}>\r\n                <Row>\r\n                    <Col>\r\n                        <Image src={`${POSTER_PATH}/${detailMovie?.poster_path}`} alt={detailMovie?.original_title} style={{ width: 350 }} />\r\n                    </Col>\r\n                    <Col style={{ padding: \"10px 20px\", width: \"500px\" }}>\r\n                        <Typography.Title level={4} style={{ color: \"#fff\" }}>{detailMovie?.original_title}</Typography.Title>\r\n                        <Typography.Title level={5} style={{ color: \"#fff\" }}>Release Date: {detailMovie?.release_date}</Typography.Title>\r\n                        <Typography.Title level={5} style={{ color: \"#fff\" }}>Runtime: {detailMovie?.runtime} min</Typography.Title>\r\n                        <Typography.Title level={5} style={{ color: \"#fff\" }}>Vote Average: {detailMovie?.vote_average} / 10</Typography.Title>\r\n                        <Typography.Title level={5} style={{ color: \"#fff\" }}>Total Votes: {detailMovie?.vote_count}</Typography.Title>\r\n                        <Typography.Title level={5} style={{ color: \"#fff\" }}>Budget: {detailMovie?.budget === 0 ? <Typography.Text style={{ color: \"#fff\" }}>-</Typography.Text> : <Typography.Text style={{ color: \"#fff\" }}> $ {formatMoney(detailMovie?.budget)} </Typography.Text >} </Typography.Title>\r\n                        <Typography.Title level={5} style={{ color: \"#fff\" }}>Overview:</Typography.Title>\r\n                        <Typography.Text style={{ color: \"#fff\" }}>{detailMovie?.overview}</Typography.Text>\r\n                        <Typography.Title level={5} style={{ color: \"#fff\" }}>Production Company: {detailMovie?.production_companies[0] == null && <Typography.Text style={{ color: \"#fff\" }}>-</Typography.Text>}</Typography.Title>\r\n                        <Row gutter={[16, 16]}>\r\n                            {detailMovie?.production_companies.map(item => (\r\n                                <Col>\r\n                                    {item.logo_path == null ? <Typography.Title level={4} style={{ backgroundColor: \"#fff\", padding: \"0 5px\" }}>{item.name}</Typography.Title> : <Image preview={false} src={`${POSTER_PATH}/${item.logo_path}`} alt={item.name} style={{ width: 150, height: 150, backgroundColor: \"#fff\" }} />}\r\n                                </Col>\r\n                            ))}\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Layout.Content>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default DetailMovie","D:\\Typscript-Project\\movie-catalogue\\src\\constants\\utils.tsx",[],"D:\\Typscript-Project\\movie-catalogue\\src\\utils\\APIUtils.tsx",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"56","replacedBy":"60"},{"ruleId":"58","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":24,"column":8,"nodeType":"64","endLine":24,"endColumn":10,"suggestions":"65"},{"ruleId":"62","severity":1,"message":"63","line":24,"column":8,"nodeType":"64","endLine":24,"endColumn":10,"suggestions":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],["67"],["68"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'fetchMovie'. Either include it or remove the dependency array.","ArrayExpression",["69"],["70"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},{"desc":"71","fix":"73"},"Update the dependencies array to be: [fetchMovie]",{"range":"74","text":"75"},{"range":"76","text":"75"},[821,823],"[fetchMovie]",[805,807]]